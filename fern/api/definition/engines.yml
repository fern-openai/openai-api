# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

service:
  auth: true
  base-path: /engines
  endpoints:
    list:
      path: ""
      method: GET
      docs: >-
        Lists the currently available (non-finetuned) models, and provides basic
        information about each one such as the owner and availability.
      response: ListEnginesResponse

    retrieve:
      path: /{engine_id}
      method: GET
      docs: >-
        Retrieves a model instance, providing basic information about it such as
        the owner and availability.
      path-parameters:
        engine_id:
          docs: |
            The ID of the engine to use for this request
          type: EngineId
      response: Engine

    create:
      path: /{engine_id}/search
      method: POST
      docs: >
        The search endpoint computes similarity scores between provided query
        and documents. Documents can be passed directly to the API if there are
        no more than 200 of them.
        To go beyond the 200 document limit, documents can be processed offline
        and then used for efficient retrieval at query time. When `file` is set,
        the search endpoint searches over all the documents in the given file
        and returns up to the `max_rerank` number of documents. These documents
        will be returned along with their search scores.
        The similarity score is a positive score that usually ranges from 0 to
        300 (but can sometimes go higher), where a score above 200 usually means
        the document is semantically similar to the query.
      path-parameters:
        engine_id:
          docs: >-
            The ID of the engine to use for this request.  You can select one of
            `ada`, `babbage`, `curie`, or `davinci`.
          type: EngineId
      request:
        body: CreateSearchRequest
      response: CreateSearchResponse

types:
  EngineId: string

  Engine:
    properties:
      id: EngineId
      object: string
      created: optional<integer>
      ready: boolean

  ListEnginesResponse:
    properties:
      object: string
      data: list<Engine>
  CreateSearchRequest:
    properties:
      query:
        docs: Query to search against the documents.
        type: string
      documents:
        docs: >
          Up to 200 documents to search over, provided as a list of strings.
          The maximum document length (in tokens) is 2034 minus the number of
          tokens in the query.
          You should specify either `documents` or a `file`, but not both.
        type: optional<list<string>>
      file:
        docs: |
          The ID of an uploaded file that contains documents to search over.
          You should specify either `documents` or a `file`, but not both.
        type: optional<string>
      max_rerank:
        docs: >
          The maximum number of documents to be re-ranked and returned by
          search.
          This flag only takes effect when `file` is set.
        type: optional<integer>
      return_metadata:
        docs: >
          A special boolean flag for showing metadata. If set to `true`, each
          document entry in the returned JSON will contain a "metadata" field.
          This flag only takes effect when `file` is set.
        type: optional<boolean>
      user:
        docs: >
          A unique identifier representing your end-user, which can help OpenAI
          to monitor and detect abuse. [Learn
          more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).
        type: optional<string>

  CreateSearchResponse:
    properties:
      object: optional<string>
      model: optional<string>
      data: optional<list<SearchData>>

  SearchData:
    properties:
      object: optional<string>
      document: optional<integer>
      score: optional<double>
