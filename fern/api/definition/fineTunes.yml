# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

service:
  auth: true
  base-path: /fine-tunes
  endpoints:
    list:
      path: ""
      method: GET
      docs: List your organization's fine-tuning jobs
      response: ListFineTunesResponse

    create:
      path: ""
      method: POST
      docs: >
        Creates a job that fine-tunes a specified model from a given dataset.
        Response includes details of the enqueued job including job status and
        the name of the fine-tuned models once complete.
        [Learn more about Fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
      request:
        body: CreateFineTuneRequest
      response: FineTune

    retrieve:
      path: /{fine_tune_id}
      method: GET
      docs: |
        Gets info about the fine-tune job.
        [Learn more about Fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
      path-parameters:
        fine_tune_id:
          docs: |
            The ID of the fine-tune job
          type: FineTuneId
      response: FineTune

    cancel:
      path: /{fine_tune_id}/cancel
      method: POST
      docs: Immediately cancel a fine-tune job.
      path-parameters:
        fine_tune_id:
          docs: |
            The ID of the fine-tune job to cancel
          type: FineTuneId
      response: FineTune

    listEvents:
      path: /{fine_tune_id}/events
      method: GET
      docs: |
        Get fine-grained status updates for a fine-tune job.
      path-parameters:
        fine_tune_id:
          docs: |
            The ID of the fine-tune job to get events for.
          type: FineTuneId
      request:
        name: ListFineTuneEventsRequest
        query-parameters:
          stream:
            docs: >
              Whether to stream events for the fine-tune job. If set to true,
              events will be sent as data-only
              [server-sent
              events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
              as they become available. The stream will terminate with a
              `data: [DONE]` message when the job is finished (succeeded,
              cancelled,
              or failed).
              If set to false, only events generated so far will be returned.
            type: optional<boolean>
      response: ListFineTuneEventsResponse

types:
  FineTuneId: string

  ListFineTunesResponse:
    properties:
      object: string
      data: list<FineTune>

  CreateFineTuneRequest:
    properties:
      training_file:
        docs: >
          The ID of an uploaded file that contains training data.
          See [upload file](https://platform.openai.com/docs/api-reference/files/upload) for how to upload
          a file.
          Your dataset must be formatted as a JSONL file, where each training
          example is a JSON object with the keys "prompt" and "completion".
          Additionally, you must upload your file with the purpose `fine-tune`.
          See the [fine-tuning
          guide](https://platform.openai.com/docs/guides/fine-tuning/creating-training-data) for more
          details.
        type: string
      validation_file:
        docs: >
          The ID of an uploaded file that contains validation data.
          If you provide this file, the data is used to generate validation
          metrics periodically during fine-tuning. These metrics can be viewed
          in
          the [fine-tuning results
          file](https://platform.openai.com/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).
          Your train and validation data should be mutually exclusive.
          Your dataset must be formatted as a JSONL file, where each validation
          example is a JSON object with the keys "prompt" and "completion".
          Additionally, you must upload your file with the purpose `fine-tune`.
          See the [fine-tuning
          guide](https://platform.openai.com/docs/guides/fine-tuning/creating-training-data) for more
          details.
        type: optional<string>
      model:
        docs: >
          The name of the base model to fine-tune. You can select one of "ada",
          "babbage", "curie", "davinci", or a fine-tuned model created after
          2022-04-21.
          To learn more about these models, see the
          [Models](https://platform.openai.com/docs/models) documentation.
        type: optional<string>
      n_epochs:
        docs: |
          The number of epochs to train the model for. An epoch refers to one
          full cycle through the training dataset.
        type: optional<integer>
      batch_size:
        docs: |
          The batch size to use for training. The batch size is the number of
          training examples used to train a single forward and backward pass.
          By default, the batch size will be dynamically configured to be
          ~0.2% of the number of examples in the training set, capped at 256 -
          in general, we've found that larger batch sizes tend to work better
          for larger datasets.
        type: optional<integer>
      learning_rate_multiplier:
        docs: |
          The learning rate multiplier to use for training.
          The fine-tuning learning rate is the original learning rate used for
          pretraining multiplied by this value.
          By default, the learning rate multiplier is the 0.05, 0.1, or 0.2
          depending on final `batch_size` (larger learning rates tend to
          perform better with larger batch sizes). We recommend experimenting
          with values in the range 0.02 to 0.2 to see what produces the best
          results.
        type: optional<double>
      prompt_loss_weight:
        docs: |
          The weight to use for loss on the prompt tokens. This controls how
          much the model tries to learn to generate the prompt (as compared
          to the completion which always has a weight of 1.0), and can add
          a stabilizing effect to training when completions are short.
          If prompts are extremely long (relative to completions), it may make
          sense to reduce this weight so as to avoid over-prioritizing
          learning the prompt.
        type: optional<double>
      compute_classification_metrics:
        docs: >
          If set, we calculate classification-specific metrics such as accuracy
          and F-1 score using the validation set at the end of every epoch.
          These metrics can be viewed in the [results
          file](https://platform.openai.com/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).
          In order to compute classification metrics, you must provide a
          `validation_file`. Additionally, you must
          specify `classification_n_classes` for multiclass classification or
          `classification_positive_class` for binary classification.
        type: optional<boolean>
      classification_n_classes:
        docs: |
          The number of classes in a classification task.
          This parameter is required for multiclass classification.
        type: optional<integer>
      classification_positive_class:
        docs: |
          The positive class in binary classification.
          This parameter is needed to generate precision, recall, and F1
          metrics when doing binary classification.
        type: optional<string>
      classification_betas:
        docs: |
          If this is provided, we calculate F-beta scores at the specified
          beta values. The F-beta score is a generalization of F-1 score.
          This is only used for binary classification.
          With a beta of 1 (i.e. the F-1 score), precision and recall are
          given the same weight. A larger beta score puts more weight on
          recall and less on precision. A smaller beta score puts more weight
          on precision and less on recall.
        type: optional<list<double>>
      suffix:
        docs: >
          A string of up to 40 characters that will be added to your fine-tuned
          model name.
          For example, a `suffix` of "custom-model-name" would produce a model
          name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.
        type: optional<string>

  ListFineTuneEventsResponse:
    properties:
      object: string
      data: list<FineTuneEvent>

  FineTune:
    properties:
      id: string
      object: string
      created_at: integer
      updated_at: integer
      model: string
      fine_tuned_model: optional<string>
      organization_id: string
      status: string
      hyperparams: map<string, unknown>
      training_files: list<commons.OpenAIFile>
      validation_files: list<commons.OpenAIFile>
      result_files: list<commons.OpenAIFile>
      events: optional<list<FineTuneEvent>>

  FineTuneEvent:
    properties:
      object: string
      created_at: integer
      level: string
      message: string
